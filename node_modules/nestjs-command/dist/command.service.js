"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandService = void 0;
const yargs_1 = __importDefault(require("yargs"));
const helpers_1 = require("yargs/helpers");
const common_1 = require("@nestjs/common");
let CommandService = class CommandService {
    initialize(metadatas) {
        yargs_1.default
            .scriptName('cli')
            .demandCommand(1)
            .help('h')
            .alias('h', 'help')
            .alias('v', 'version')
            .strict();
        metadatas.forEach(command => {
            yargs_1.default.command(command);
        });
    }
    exec(args = (0, helpers_1.hideBin)(process.argv)) {
        if ('parseAsync' in yargs_1.default
            && typeof yargs_1.default.parseAsync === 'function') {
            return yargs_1.default.parseAsync(args);
        }
        return new Promise((resolve, reject) => {
            try {
                yargs_1.default
                    .onFinishCommand(resolve)
                    .parse(args);
            }
            catch (error) {
                reject(error);
            }
        });
    }
};
CommandService = __decorate([
    (0, common_1.Global)(),
    (0, common_1.Injectable)()
], CommandService);
exports.CommandService = CommandService;
