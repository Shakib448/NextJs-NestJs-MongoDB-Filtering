"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandModuleTest = void 0;
const command_explorer_service_1 = require("./command-explorer.service");
const defaultOpts = {
    findCommandModule: ((app, command) => {
        const commandModules = app.get(command_explorer_service_1.CommandExplorerService).explore();
        const commandModule = commandModules.find(i => i.command === command);
        if (commandModule === undefined) {
            return Promise.reject(new Error('CommandModule not found'));
        }
        return Promise.resolve(commandModule);
    })
};
class CommandModuleTest {
    constructor(_app, _opts = {}) {
        this._app = _app;
        this._opts = _opts;
        this._opts = Object.assign(Object.assign({}, defaultOpts), _opts);
    }
    execute(command, args, exitCode) {
        return __awaiter(this, void 0, void 0, function* () {
            const commandModule = yield this._opts.findCommandModule(this._app, command);
            const processExitFn = process.exit;
            let commandModuleExitCode = null;
            process.exit = ((code) => {
                commandModuleExitCode = code;
            });
            try {
                const result = yield commandModule.handler(Object.assign({ _: [], $0: command }, args));
                if (exitCode !== undefined && commandModuleExitCode !== exitCode) {
                    throw new Error(`CommandModule Exit Code was ${commandModuleExitCode} instead of ${exitCode}`);
                }
                return result;
            }
            finally {
                process.exit = processExitFn;
            }
        });
    }
}
exports.CommandModuleTest = CommandModuleTest;
