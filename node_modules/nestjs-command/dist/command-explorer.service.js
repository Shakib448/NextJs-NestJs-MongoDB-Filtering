"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandExplorerService = void 0;
const lodash_compact_1 = __importDefault(require("lodash.compact"));
const lodash_flattendeep_1 = __importDefault(require("lodash.flattendeep"));
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const command_decorator_1 = require("./command.decorator");
const command_service_1 = require("./command.service");
let CommandExplorerService = class CommandExplorerService {
    constructor(modulesContainer, metadataScanner, commandService) {
        this.modulesContainer = modulesContainer;
        this.metadataScanner = metadataScanner;
        this.commandService = commandService;
    }
    explore() {
        const components = [...this.modulesContainer.values()].map(module => module.components);
        return (0, lodash_compact_1.default)((0, lodash_flattendeep_1.default)(components.map(component => [...component.values()].map(({ instance, metatype }) => this.filterCommands(instance, metatype)))));
    }
    filterCommands(instance, metatype) {
        if (!instance)
            return;
        const prototype = Object.getPrototypeOf(instance);
        const components = this.metadataScanner.scanFromPrototype(instance, prototype, name => this.extractMetadata(instance, prototype, name));
        return components
            .filter(command => !!command.metadata)
            .map(command => {
            const exec = instance[command.methodName].bind(instance);
            const builder = (yargs) => this.generateCommandBuilder(command.metadata.params, yargs);
            const handler = (args) => __awaiter(this, void 0, void 0, function* () {
                const params = this.generateCommandHandlerParams(command.metadata.params, args);
                yield exec(...params);
            });
            return Object.assign(Object.assign({}, command.metadata.option), { builder,
                handler });
        });
    }
    extractMetadata(instance, prototype, methodName) {
        const callback = prototype[methodName];
        const metadata = Reflect.getMetadata(command_decorator_1.COMMAND_HANDLER_METADATA, callback);
        return {
            methodName,
            metadata
        };
    }
    iteratorParamMetadata(params, callback) {
        if (!params) {
            return;
        }
        Object.keys(params).forEach(key => {
            const param = params[key];
            if (!param || !Array.isArray(param)) {
                return;
            }
            param.forEach(metadata => callback(metadata, key));
        });
    }
    generateCommandHandlerParams(params, argv) {
        const list = [];
        this.iteratorParamMetadata(params, (item, key) => {
            switch (key) {
                case command_decorator_1.CommandParamTypes.OPTION:
                    list[item.index] = argv[item.option.name];
                    break;
                case command_decorator_1.CommandParamTypes.POSITIONAL:
                    list[item.index] =
                        argv[item.option.name];
                    break;
                case command_decorator_1.CommandParamTypes.ARGV:
                    list[item.index] = argv;
                default:
                    break;
            }
        });
        return list;
    }
    generateCommandBuilder(params, yargs) {
        this.iteratorParamMetadata(params, (item, key) => {
            switch (key) {
                case command_decorator_1.CommandParamTypes.OPTION:
                    yargs.option(item.option.name, item.option);
                    break;
                case command_decorator_1.CommandParamTypes.POSITIONAL:
                    yargs.positional(item.option.name, item.option);
                    break;
                default:
                    break;
            }
        });
        return yargs;
    }
};
CommandExplorerService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [core_1.ModulesContainer,
        core_1.MetadataScanner,
        command_service_1.CommandService])
], CommandExplorerService);
exports.CommandExplorerService = CommandExplorerService;
